{"version":3,"file":"static/js/92.24dd3bb6.chunk.js","mappings":"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","sources":["redux/selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.styled.js","components/ContactForm/ContactForm.styled.js","components/Filter/Filter.js","components/Section/Section.js","pages/Contacts/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilterValue = state => state.filter.value;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilterValue],\n  (contacts, filterValue) =>\n    contacts.filter(contact => contact.name.toLowerCase().includes(filterValue))\n);\n","import { useMemo, useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { toast } from 'react-toastify';\nimport { addContact } from 'redux/operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts, selectIsLoading } from 'redux/selectors';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameInputId = useMemo(() => nanoid(4), []);\n  const numberInputId = useMemo(() => nanoid(4), []);\n\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const contacts = useSelector(selectContacts);\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const doesContactExist = nameQuery => {\n    return contacts.some(\n      contact => contact.name.toLowerCase() === nameQuery.toLowerCase()\n    );\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (doesContactExist(name)) {\n      toast.warning(`'${name}' is already in contacts`);\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n\n    resetForm();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor={nameInputId}>Name</label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        id={nameInputId}\n        placeholder=\"Contact name\"\n        required\n        autoComplete=\"off\"\n        onChange={handleChange}\n        value={name}\n      />\n\n      <label htmlFor={numberInputId}>Number</label>\n      <input\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        id={numberInputId}\n        placeholder=\"Phone number\"\n        required\n        autoComplete=\"off\"\n        onChange={handleChange}\n        value={number}\n      />\n      <button type=\"submit\" disabled={isLoading}>\n        {isLoading ? 'Adding contact...' : 'Add contact'}\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\nimport {\n  selectError,\n  selectIsLoading,\n  selectVisibleContacts,\n} from 'redux/selectors';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const showLoading = isLoading && !error;\n  const showError = error && !isLoading;\n\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <>\n      {showLoading && <p>Loading...</p>}\n      {showError && <p>{error.message}</p>}\n\n      {visibleContacts.map(({ id, name, number }) => (\n        <li key={id}>\n          {name}: {number}\n          <button\n            id={id}\n            type=\"button\"\n            onClick={() => {\n              dispatch(deleteContact(id));\n            }}\n            disabled={isLoading}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </>\n  );\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\n\nexport const FilterWrap = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  width: 300px;\n  padding: 20px;\n\n  border: 1px dashed #676767;\n  border-radius: 5px;\n`;\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n\n  padding: 20px;\n  width: 300px;\n\n  border: 1px dashed #676767;\n  border-radius: 5px;\n`;\n\nexport const InputLabel = styled.label`\n  font-size: 20px;\n\n  &:not(:first-child) {\n    margin-top: 10px;\n  }\n`;\n\nexport const InputField = styled.input`\n  margin-top: 5px;\n\n  border: 1px dashed #676767;\n  border-radius: 5px;\n\n  padding: 5px;\n\n  transition: 300ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:focus {\n    border: 1px solid #4fe7f5;\n    outline: none;\n  }\n`;\n\nexport const AddButton = styled.button`\n  margin-top: 20px;\n  padding: 5px;\n  width: 150px;\n  align-self: center;\n\n  background-color: #a5f7ff;\n  border: 1px solid #62c0c9;\n  border-radius: 5px;\n\n  transition: 300ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover,\n  &:focus {\n    cursor: pointer;\n    background: #4fe7f5;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { FilterWrap } from './Filter.styled';\nimport {\n  InputLabel,\n  InputField,\n} from 'components/ContactForm/ContactForm.styled';\nimport { setContactFilter } from 'redux/filterSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { value } = e.target;\n\n    value\n      ? dispatch(setContactFilter(value.trim().toLowerCase()))\n      : dispatch(setContactFilter(''));\n  };\n\n  return (\n    <FilterWrap>\n      <InputLabel htmlFor=\"filter\">Find your contacts by name</InputLabel>\n      <InputField\n        type=\"text\"\n        name=\"filter\"\n        id=\"filter\"\n        autoComplete=\"off\"\n        title=\"Find your contacts by name\"\n        onChange={handleChange}\n      />\n    </FilterWrap>\n  );\n};\n\nexport default Filter;\n","import PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => {\n  return (\n    <div>\n      <h2>{title}</h2>\n      {children}\n    </div>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.any,\n};\n\nexport default Section;\n","import ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\nimport Section from 'components/Section';\n\nconst Contacts = () => {\n  return (\n    <>\n      <p>Contacts</p>\n      <Section title=\"Phonebook\">\n        <ContactForm />\n      </Section>\n      <Section title=\"Contacts\">\n        <Filter />\n\n        <ul>\n          <ContactList />\n        </ul>\n      </Section>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","filter","value","filterValue","contact","name","toLowerCase","includes","useState","setName","number","setNumber","nameInputId","useMemo","nanoid","numberInputId","dispatch","useDispatch","useSelector","handleChange","e","currentTarget","onSubmit","nameQuery","preventDefault","some","toast","addContact","htmlFor","type","pattern","title","id","placeholder","required","autoComplete","onChange","disabled","showLoading","showError","visibleContacts","message","map","onClick","deleteContact","FilterWrap","styled","InputLabel","InputField","target","setContactFilter","trim","children"],"sourceRoot":""}